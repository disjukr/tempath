lex = {
    rules = [
        # comment
        [|#.*(?=\r?\n|$)
        ,|                              /* pass */
        ]

        # token separator
        [|[\s]+
        ,|                              /* pass */
        ]

        # argument separator
        [|,
        ,|                              return ','
        ]

        [|\b(and)\b
        ,|                              return 'AND'
        ]

        [|\b(as)\b
        ,|                              return 'AS'
        ]

        [|\b(def)\b
        ,|                              return 'DEF'
        ]

        [|\b(else)\b
        ,|                              return 'ELSE'
        ]

        [|\b(end)\b
        ,|                              return 'END'
        ]

        [|\b(for)\b
        ,|                              return 'FOR'
        ]

        [|\b(if)\b
        ,|                              return 'IF'
        ]

        [|\b(import)\b
        ,|                              return 'IMPORT'
        ]

        [|\b(in)\b
        ,|                              return 'IN'
        ]

        [|\b(not)\b
        ,|                              return 'NOT'
        ]

        [|\b(or)\b
        ,|                              return 'OR'
        ]

        [|\b(prop)\b
        ,|                              return 'PROP'
        ]

        [|\b(set)\b
        ,|                              return 'SET'
        ]

        [|\b(default)\b
        ,|                              return 'DEFAULT'
        ]

        [|[_A-Za-z]+
        ,|                              return 'SYMBOL'
        ]

        [|\$[_A-Za-z][_0-9A-Za-z]*
        ,|                              return 'LVALUE'
        ]

        [|[\-+]?\d+(?:\.\d+)?
        ,|                              return 'NUMBER'
        ]

        [|"([^\\\\"]|\\\\.)*"|'([^\\\\']|\\\\.)*'
        ,|                              return 'STRING'
        ]

        [|~
        ,|                              return '~'
        ]

        [|\(
        ,|                              return '('
        ]

        [|\)
        ,|                              return ')'
        ]

        [|\+
        ,|                              return '+'
        ]

        [|-
        ,|                              return '-'
        ]

        [|\*
        ,|                              return '*'
        ]

        [|\/
        ,|                              return '/'
        ]

        [|%
        ,|                              return '%'
        ]

        [|<=
        ,|                              return '<='
        ]

        [|>=
        ,|                              return '>='
        ]

        [|<
        ,|                              return '<'
        ]

        [|>
        ,|                              return '>'
        ]

        [|=
        ,|                              return '='
        ]
    ]
}

start = 'ast'

bnf = {

    ast = [
        ['commands', 'RETN']
    ]

    commands = [
        ['command', 'LIST $1']
        ['commands command', 'PUSH $1, $2']
    ]

    command = [
        ['DEF SYMBOL commands END DEF', 'TOKN "def", $2, $3']
        ['FOR LVALUE IN range commands END FOR', 'TOKN "for in range", $2, $4, $5']
        ['IF expression commands END IF', 'TOKN "if", $2, $3']
        ['IF expression commands ELSE commands END IF', 'TOKN "if else", $2, $3, $5']
        ['IMPORT string', 'TOKN "import", $2, undefined'] # this is just sugar
        ['IMPORT string AS SYMBOL', 'TOKN "import", $2, $4']
        ['PROP prop_definitions', 'TOKN "prop", $2']
        ['SET LVALUE , expression', 'TOKN "set", $2, $4']
        ['SYMBOL arguments', 'TOKN "command", $1, $2']
    ]

    prop_definitions = [
        ['prop_definition', 'LIST $1']
        ['prop_definitions , prop_definition', 'PUSH $1, $3']
    ]

    prop_definition = [
        ['LVALUE', 'TOKN "name", $1']
        ['LVALUE range', 'TOKN "name range", $1, $2']
        ['LVALUE number', 'TOKN "name default", $1, $2']
        ['LVALUE range number', 'TOKN "name range default", $1, $2, $3']
    ]

    arguments = [
        ['', 'LIST']
        ['argument', 'LIST $1']
        ['arguments argument', 'PUSH $1, $2']
        ['arguments , argument', 'PUSH $1, $3']
    ]

    argument = [
        ['default', 'SELF']
        ['expression', 'SELF']
    ]
    default = [['DEFAULT', 'TOKN "default"']]

    primary_expression = [
        ['number', 'SELF']
        ['lvalue', 'SELF']
        ['( expression )', 'SELF $2']
    ]

    prefix_expression = [
        ['primary_expression', 'SELF']
        ['+ primary_expression', 'TOKN "prefix +", $2']
        ['- primary_expression', 'TOKN "prefix -", $2']
    ]

    multiplicative_expression = [
        ['prefix_expression', 'SELF']
        ['multiplicative_expression * prefix_expression', 'TOKN "*", $1, $3']
        ['multiplicative_expression / prefix_expression', 'TOKN "/", $1, $3']
        ['multiplicative_expression % prefix_expression', 'TOKN "%", $1, $3']
    ]

    additive_expression = [
        ['multiplicative_expression', 'SELF']
        ['additive_expression + multiplicative_expression', 'TOKN "+", $1, $3']
        ['additive_expression - multiplicative_expression', 'TOKN "-", $1, $3']
    ]

    relational_expression = [
        ['additive_expression', 'SELF']
        ['relational_expression < additive_expression', 'TOKN "<", $1, $3']
        ['relational_expression > additive_expression', 'TOKN ">", $1, $3']
        ['relational_expression <= additive_expression', 'TOKN "<=", $1, $3']
        ['relational_expression >= additive_expression', 'TOKN ">=", $1, $3']
    ]

    equality_expression = [
        ['relational_expression', 'SELF']
        ['equality_expression = relational_expression', 'TOKN "=", $1, $3']
    ]

    logical_not_expression = [
        ['equality_expression', 'SELF']
        ['NOT equality_expression', 'TOKN "not", $2']
    ]

    logical_and_expression = [
        ['logical_not_expression', 'SELF']
        ['logical_and_expression AND logical_not_expression', 'TOKN "and", $1, $3']
    ]

    logical_or_expression = [
        ['logical_and_expression', 'SELF']
        ['logical_or_expression OR logical_and_expression', 'TOKN "or", $1, $3']
    ]

    expression = [
        ['logical_or_expression', 'SELF']
    ]
    number = [['NUMBER', 'TOKN "number", +$1']]
    lvalue = [['LVALUE', 'TOKN "lvalue", $1']]

    range = [
        ['NUMBER ~ NUMBER', 'TOKN "range", +$1, +$3']
    ]
    string = [
        ['STRING', 'TOKN "string", eval($1)']
    ]

}
