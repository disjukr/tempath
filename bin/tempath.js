var tempath = {};
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
tempath._parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ast":3,"commands":4,"command":5,"DEF":6,"SYMBOL":7,"END":8,"FOR":9,"LVALUE":10,"IN":11,"dynamic_range":12,"IF":13,"expression":14,"ELSE":15,"IMPORT":16,"string":17,"AS":18,"PROP":19,"prop_definitions":20,"SET":21,",":22,"arguments":23,"prop_definition":24,"range":25,"number":26,"argument":27,"default":28,"DEFAULT":29,"primary_expression":30,"lvalue":31,"(":32,")":33,"prefix_expression":34,"+":35,"-":36,"multiplicative_expression":37,"*":38,"/":39,"%":40,"additive_expression":41,"relational_expression":42,"<":43,">":44,"<=":45,">=":46,"equality_expression":47,"=":48,"logical_not_expression":49,"NOT":50,"logical_and_expression":51,"AND":52,"logical_or_expression":53,"OR":54,"NUMBER":55,"~":56,"STRING":57,"$accept":0,"$end":1},
terminals_: {2:"error",6:"DEF",7:"SYMBOL",8:"END",9:"FOR",10:"LVALUE",11:"IN",13:"IF",15:"ELSE",16:"IMPORT",18:"AS",19:"PROP",21:"SET",22:",",29:"DEFAULT",32:"(",33:")",35:"+",36:"-",38:"*",39:"/",40:"%",43:"<",44:">",45:"<=",46:">=",48:"=",50:"NOT",52:"AND",54:"OR",55:"NUMBER",56:"~",57:"STRING"},
productions_: [0,[3,1],[4,1],[4,2],[5,5],[5,7],[5,5],[5,7],[5,2],[5,4],[5,2],[5,4],[5,2],[20,1],[20,3],[24,1],[24,2],[24,2],[24,3],[23,0],[23,1],[23,2],[23,3],[27,1],[27,1],[28,1],[30,1],[30,1],[30,3],[30,4],[34,1],[34,2],[34,2],[37,1],[37,3],[37,3],[37,3],[41,1],[41,3],[41,3],[42,1],[42,3],[42,3],[42,3],[42,3],[47,1],[47,3],[49,1],[49,2],[51,1],[51,3],[53,1],[53,3],[14,1],[26,1],[31,1],[25,3],[12,3],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0];
break;
case 2:this.$ = [$$[$0]];
break;
case 3:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4:this.$ = { type: "def", tree: [$$[$0-3], $$[$0-2]], lloc: this._$ };
break;
case 5:this.$ = { type: "for in range", tree: [$$[$0-5], $$[$0-3], $$[$0-2]], lloc: this._$ };
break;
case 6:this.$ = { type: "if", tree: [$$[$0-3], $$[$0-2]], lloc: this._$ };
break;
case 7:this.$ = { type: "if else", tree: [$$[$0-5], $$[$0-4], $$[$0-2]], lloc: this._$ };
break;
case 8:this.$ = { type: "import", tree: [$$[$0], undefined], lloc: this._$ };
break;
case 9:this.$ = { type: "import", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 10:this.$ = { type: "prop", tree: [$$[$0]], lloc: this._$ };
break;
case 11:this.$ = { type: "set", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 12:this.$ = { type: "command", tree: [$$[$0-1], $$[$0]], lloc: this._$ };
break;
case 13:this.$ = [$$[$0]];
break;
case 14:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 15:this.$ = { type: "name", tree: [$$[$0]], lloc: this._$ };
break;
case 16:this.$ = { type: "name range", tree: [$$[$0-1], $$[$0]], lloc: this._$ };
break;
case 17:this.$ = { type: "name default", tree: [$$[$0-1], $$[$0]], lloc: this._$ };
break;
case 18:this.$ = { type: "name range default", tree: [$$[$0-2], $$[$0-1], $$[$0]], lloc: this._$ };
break;
case 19:this.$ = [$$[$0]];
break;
case 20:this.$ = [$$[$0]];
break;
case 21:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 22:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 23:this.$ = $$[$0]
break;
case 24:this.$ = $$[$0]
break;
case 25:this.$ = { type: "default", tree: [], lloc: this._$ };
break;
case 26:this.$ = $$[$0]
break;
case 27:this.$ = $$[$0]
break;
case 28:this.$ = $$[$0-1]
break;
case 29:this.$ = { type: "function call", tree: [$$[$0-2], $$[$0-1]], lloc: this._$ };
break;
case 30:this.$ = $$[$0]
break;
case 31:this.$ = { type: "prefix +", tree: [$$[$0]], lloc: this._$ };
break;
case 32:this.$ = { type: "prefix -", tree: [$$[$0]], lloc: this._$ };
break;
case 33:this.$ = $$[$0]
break;
case 34:this.$ = { type: "*", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 35:this.$ = { type: "/", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 36:this.$ = { type: "%", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 37:this.$ = $$[$0]
break;
case 38:this.$ = { type: "+", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 39:this.$ = { type: "-", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 40:this.$ = $$[$0]
break;
case 41:this.$ = { type: "<", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 42:this.$ = { type: ">", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 43:this.$ = { type: "<=", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 44:this.$ = { type: ">=", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 45:this.$ = $$[$0]
break;
case 46:this.$ = { type: "=", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 47:this.$ = $$[$0]
break;
case 48:this.$ = { type: "not", tree: [$$[$0]], lloc: this._$ };
break;
case 49:this.$ = $$[$0]
break;
case 50:this.$ = { type: "and", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 51:this.$ = $$[$0]
break;
case 52:this.$ = { type: "or", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 53:this.$ = $$[$0]
break;
case 54:this.$ = { type: "number", tree: [$$[$0]], lloc: this._$ };
break;
case 55:this.$ = { type: "lvalue", tree: [$$[$0]], lloc: this._$ };
break;
case 56:this.$ = { type: "range", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 57:this.$ = { type: "range", tree: [$$[$0-2], $$[$0]], lloc: this._$ };
break;
case 58:this.$ = { type: "string", tree: [eval($$[$0])], lloc: this._$ };
break;
}
},
table: [{3:1,4:2,5:3,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{1:[3]},{1:[2,1],5:11,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{1:[2,2],6:[2,2],7:[2,2],8:[2,2],9:[2,2],13:[2,2],15:[2,2],16:[2,2],19:[2,2],21:[2,2]},{7:[1,12]},{10:[1,13]},{10:[1,31],14:14,26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{17:32,57:[1,33]},{10:[1,36],20:34,24:35},{10:[1,37]},{1:[2,19],6:[2,19],7:[2,19],8:[2,19],9:[2,19],10:[1,31],13:[2,19],14:41,15:[2,19],16:[2,19],19:[2,19],21:[2,19],22:[2,19],23:38,26:27,27:39,28:40,29:[1,42],30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,3],6:[2,3],7:[2,3],8:[2,3],9:[2,3],13:[2,3],15:[2,3],16:[2,3],19:[2,3],21:[2,3]},{4:43,5:3,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{11:[1,44]},{4:45,5:3,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{1:[2,53],6:[2,53],7:[2,53],8:[2,53],9:[2,53],10:[2,53],13:[2,53],15:[2,53],16:[2,53],19:[2,53],21:[2,53],22:[2,53],29:[2,53],32:[2,53],33:[2,53],35:[2,53],36:[2,53],50:[2,53],54:[1,46],55:[2,53],56:[2,53]},{1:[2,51],6:[2,51],7:[2,51],8:[2,51],9:[2,51],10:[2,51],13:[2,51],15:[2,51],16:[2,51],19:[2,51],21:[2,51],22:[2,51],29:[2,51],32:[2,51],33:[2,51],35:[2,51],36:[2,51],50:[2,51],52:[1,47],54:[2,51],55:[2,51],56:[2,51]},{1:[2,49],6:[2,49],7:[2,49],8:[2,49],9:[2,49],10:[2,49],13:[2,49],15:[2,49],16:[2,49],19:[2,49],21:[2,49],22:[2,49],29:[2,49],32:[2,49],33:[2,49],35:[2,49],36:[2,49],50:[2,49],52:[2,49],54:[2,49],55:[2,49],56:[2,49]},{1:[2,47],6:[2,47],7:[2,47],8:[2,47],9:[2,47],10:[2,47],13:[2,47],15:[2,47],16:[2,47],19:[2,47],21:[2,47],22:[2,47],29:[2,47],32:[2,47],33:[2,47],35:[2,47],36:[2,47],48:[1,48],50:[2,47],52:[2,47],54:[2,47],55:[2,47],56:[2,47]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:49,55:[1,30]},{1:[2,45],6:[2,45],7:[2,45],8:[2,45],9:[2,45],10:[2,45],13:[2,45],15:[2,45],16:[2,45],19:[2,45],21:[2,45],22:[2,45],29:[2,45],32:[2,45],33:[2,45],35:[2,45],36:[2,45],43:[1,50],44:[1,51],45:[1,52],46:[1,53],48:[2,45],50:[2,45],52:[2,45],54:[2,45],55:[2,45],56:[2,45]},{1:[2,40],6:[2,40],7:[2,40],8:[2,40],9:[2,40],10:[2,40],13:[2,40],15:[2,40],16:[2,40],19:[2,40],21:[2,40],22:[2,40],29:[2,40],32:[2,40],33:[2,40],35:[1,54],36:[1,55],43:[2,40],44:[2,40],45:[2,40],46:[2,40],48:[2,40],50:[2,40],52:[2,40],54:[2,40],55:[2,40],56:[2,40]},{1:[2,37],6:[2,37],7:[2,37],8:[2,37],9:[2,37],10:[2,37],13:[2,37],15:[2,37],16:[2,37],19:[2,37],21:[2,37],22:[2,37],29:[2,37],32:[2,37],33:[2,37],35:[2,37],36:[2,37],38:[1,56],39:[1,57],40:[1,58],43:[2,37],44:[2,37],45:[2,37],46:[2,37],48:[2,37],50:[2,37],52:[2,37],54:[2,37],55:[2,37],56:[2,37]},{1:[2,33],6:[2,33],7:[2,33],8:[2,33],9:[2,33],10:[2,33],13:[2,33],15:[2,33],16:[2,33],19:[2,33],21:[2,33],22:[2,33],29:[2,33],32:[2,33],33:[2,33],35:[2,33],36:[2,33],38:[2,33],39:[2,33],40:[2,33],43:[2,33],44:[2,33],45:[2,33],46:[2,33],48:[2,33],50:[2,33],52:[2,33],54:[2,33],55:[2,33],56:[2,33]},{1:[2,30],6:[2,30],7:[2,30],8:[2,30],9:[2,30],10:[2,30],13:[2,30],15:[2,30],16:[2,30],19:[2,30],21:[2,30],22:[2,30],29:[2,30],32:[2,30],33:[2,30],35:[2,30],36:[2,30],38:[2,30],39:[2,30],40:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],48:[2,30],50:[2,30],52:[2,30],54:[2,30],55:[2,30],56:[2,30]},{10:[1,31],26:27,30:59,31:28,32:[1,29],55:[1,30]},{10:[1,31],26:27,30:60,31:28,32:[1,29],55:[1,30]},{1:[2,26],6:[2,26],7:[2,26],8:[2,26],9:[2,26],10:[2,26],13:[2,26],15:[2,26],16:[2,26],19:[2,26],21:[2,26],22:[2,26],29:[2,26],32:[2,26],33:[2,26],35:[2,26],36:[2,26],38:[2,26],39:[2,26],40:[2,26],43:[2,26],44:[2,26],45:[2,26],46:[2,26],48:[2,26],50:[2,26],52:[2,26],54:[2,26],55:[2,26],56:[2,26]},{1:[2,27],6:[2,27],7:[2,27],8:[2,27],9:[2,27],10:[2,27],13:[2,27],15:[2,27],16:[2,27],19:[2,27],21:[2,27],22:[2,27],29:[2,27],32:[2,27],33:[2,27],35:[2,27],36:[2,27],38:[2,27],39:[2,27],40:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],48:[2,27],50:[2,27],52:[2,27],54:[2,27],55:[2,27],56:[2,27]},{7:[1,62],10:[1,31],14:61,26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,54],6:[2,54],7:[2,54],8:[2,54],9:[2,54],10:[2,54],13:[2,54],15:[2,54],16:[2,54],19:[2,54],21:[2,54],22:[2,54],29:[2,54],32:[2,54],33:[2,54],35:[2,54],36:[2,54],38:[2,54],39:[2,54],40:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],48:[2,54],50:[2,54],52:[2,54],54:[2,54],55:[2,54],56:[2,54]},{1:[2,55],6:[2,55],7:[2,55],8:[2,55],9:[2,55],10:[2,55],13:[2,55],15:[2,55],16:[2,55],19:[2,55],21:[2,55],22:[2,55],29:[2,55],32:[2,55],33:[2,55],35:[2,55],36:[2,55],38:[2,55],39:[2,55],40:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],48:[2,55],50:[2,55],52:[2,55],54:[2,55],55:[2,55],56:[2,55]},{1:[2,8],6:[2,8],7:[2,8],8:[2,8],9:[2,8],13:[2,8],15:[2,8],16:[2,8],18:[1,63],19:[2,8],21:[2,8]},{1:[2,58],6:[2,58],7:[2,58],8:[2,58],9:[2,58],13:[2,58],15:[2,58],16:[2,58],18:[2,58],19:[2,58],21:[2,58]},{1:[2,10],6:[2,10],7:[2,10],8:[2,10],9:[2,10],13:[2,10],15:[2,10],16:[2,10],19:[2,10],21:[2,10],22:[1,64]},{1:[2,13],6:[2,13],7:[2,13],8:[2,13],9:[2,13],13:[2,13],15:[2,13],16:[2,13],19:[2,13],21:[2,13],22:[2,13]},{1:[2,15],6:[2,15],7:[2,15],8:[2,15],9:[2,15],13:[2,15],15:[2,15],16:[2,15],19:[2,15],21:[2,15],22:[2,15],25:65,26:66,55:[1,30]},{22:[1,67]},{1:[2,12],6:[2,12],7:[2,12],8:[2,12],9:[2,12],10:[1,31],13:[2,12],14:41,15:[2,12],16:[2,12],19:[2,12],21:[2,12],22:[1,69],26:27,27:68,28:40,29:[1,42],30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,20],6:[2,20],7:[2,20],8:[2,20],9:[2,20],10:[2,20],13:[2,20],15:[2,20],16:[2,20],19:[2,20],21:[2,20],22:[2,20],29:[2,20],32:[2,20],33:[2,20],35:[2,20],36:[2,20],50:[2,20],55:[2,20]},{1:[2,23],6:[2,23],7:[2,23],8:[2,23],9:[2,23],10:[2,23],13:[2,23],15:[2,23],16:[2,23],19:[2,23],21:[2,23],22:[2,23],29:[2,23],32:[2,23],33:[2,23],35:[2,23],36:[2,23],50:[2,23],55:[2,23]},{1:[2,24],6:[2,24],7:[2,24],8:[2,24],9:[2,24],10:[2,24],13:[2,24],15:[2,24],16:[2,24],19:[2,24],21:[2,24],22:[2,24],29:[2,24],32:[2,24],33:[2,24],35:[2,24],36:[2,24],50:[2,24],55:[2,24]},{1:[2,25],6:[2,25],7:[2,25],8:[2,25],9:[2,25],10:[2,25],13:[2,25],15:[2,25],16:[2,25],19:[2,25],21:[2,25],22:[2,25],29:[2,25],32:[2,25],33:[2,25],35:[2,25],36:[2,25],50:[2,25],55:[2,25]},{5:11,6:[1,4],7:[1,10],8:[1,70],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{10:[1,31],12:71,14:72,26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{5:11,6:[1,4],7:[1,10],8:[1,73],9:[1,5],13:[1,6],15:[1,74],16:[1,7],19:[1,8],21:[1,9]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:75,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:76,50:[1,19],55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:77,55:[1,30]},{1:[2,48],6:[2,48],7:[2,48],8:[2,48],9:[2,48],10:[2,48],13:[2,48],15:[2,48],16:[2,48],19:[2,48],21:[2,48],22:[2,48],29:[2,48],32:[2,48],33:[2,48],35:[2,48],36:[2,48],48:[1,48],50:[2,48],52:[2,48],54:[2,48],55:[2,48],56:[2,48]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:78,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:79,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:80,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:81,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:82,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:83,55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:84,35:[1,25],36:[1,26],55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:85,35:[1,25],36:[1,26],55:[1,30]},{10:[1,31],26:27,30:24,31:28,32:[1,29],34:86,35:[1,25],36:[1,26],55:[1,30]},{1:[2,31],6:[2,31],7:[2,31],8:[2,31],9:[2,31],10:[2,31],13:[2,31],15:[2,31],16:[2,31],19:[2,31],21:[2,31],22:[2,31],29:[2,31],32:[2,31],33:[2,31],35:[2,31],36:[2,31],38:[2,31],39:[2,31],40:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],48:[2,31],50:[2,31],52:[2,31],54:[2,31],55:[2,31],56:[2,31]},{1:[2,32],6:[2,32],7:[2,32],8:[2,32],9:[2,32],10:[2,32],13:[2,32],15:[2,32],16:[2,32],19:[2,32],21:[2,32],22:[2,32],29:[2,32],32:[2,32],33:[2,32],35:[2,32],36:[2,32],38:[2,32],39:[2,32],40:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],48:[2,32],50:[2,32],52:[2,32],54:[2,32],55:[2,32],56:[2,32]},{33:[1,87]},{10:[1,31],14:41,22:[2,19],23:88,26:27,27:39,28:40,29:[1,42],30:24,31:28,32:[1,29],33:[2,19],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{7:[1,89]},{10:[1,36],24:90},{1:[2,16],6:[2,16],7:[2,16],8:[2,16],9:[2,16],13:[2,16],15:[2,16],16:[2,16],19:[2,16],21:[2,16],22:[2,16],26:91,55:[1,30]},{1:[2,17],6:[2,17],7:[2,17],8:[2,17],9:[2,17],13:[2,17],15:[2,17],16:[2,17],19:[2,17],21:[2,17],22:[2,17],56:[1,92]},{10:[1,31],14:93,26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,21],6:[2,21],7:[2,21],8:[2,21],9:[2,21],10:[2,21],13:[2,21],15:[2,21],16:[2,21],19:[2,21],21:[2,21],22:[2,21],29:[2,21],32:[2,21],33:[2,21],35:[2,21],36:[2,21],50:[2,21],55:[2,21]},{10:[1,31],14:41,26:27,27:94,28:40,29:[1,42],30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{6:[1,95]},{4:96,5:3,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{56:[1,97]},{13:[1,98]},{4:99,5:3,6:[1,4],7:[1,10],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{1:[2,52],6:[2,52],7:[2,52],8:[2,52],9:[2,52],10:[2,52],13:[2,52],15:[2,52],16:[2,52],19:[2,52],21:[2,52],22:[2,52],29:[2,52],32:[2,52],33:[2,52],35:[2,52],36:[2,52],50:[2,52],52:[1,47],54:[2,52],55:[2,52],56:[2,52]},{1:[2,50],6:[2,50],7:[2,50],8:[2,50],9:[2,50],10:[2,50],13:[2,50],15:[2,50],16:[2,50],19:[2,50],21:[2,50],22:[2,50],29:[2,50],32:[2,50],33:[2,50],35:[2,50],36:[2,50],50:[2,50],52:[2,50],54:[2,50],55:[2,50],56:[2,50]},{1:[2,46],6:[2,46],7:[2,46],8:[2,46],9:[2,46],10:[2,46],13:[2,46],15:[2,46],16:[2,46],19:[2,46],21:[2,46],22:[2,46],29:[2,46],32:[2,46],33:[2,46],35:[2,46],36:[2,46],43:[1,50],44:[1,51],45:[1,52],46:[1,53],48:[2,46],50:[2,46],52:[2,46],54:[2,46],55:[2,46],56:[2,46]},{1:[2,41],6:[2,41],7:[2,41],8:[2,41],9:[2,41],10:[2,41],13:[2,41],15:[2,41],16:[2,41],19:[2,41],21:[2,41],22:[2,41],29:[2,41],32:[2,41],33:[2,41],35:[1,54],36:[1,55],43:[2,41],44:[2,41],45:[2,41],46:[2,41],48:[2,41],50:[2,41],52:[2,41],54:[2,41],55:[2,41],56:[2,41]},{1:[2,42],6:[2,42],7:[2,42],8:[2,42],9:[2,42],10:[2,42],13:[2,42],15:[2,42],16:[2,42],19:[2,42],21:[2,42],22:[2,42],29:[2,42],32:[2,42],33:[2,42],35:[1,54],36:[1,55],43:[2,42],44:[2,42],45:[2,42],46:[2,42],48:[2,42],50:[2,42],52:[2,42],54:[2,42],55:[2,42],56:[2,42]},{1:[2,43],6:[2,43],7:[2,43],8:[2,43],9:[2,43],10:[2,43],13:[2,43],15:[2,43],16:[2,43],19:[2,43],21:[2,43],22:[2,43],29:[2,43],32:[2,43],33:[2,43],35:[1,54],36:[1,55],43:[2,43],44:[2,43],45:[2,43],46:[2,43],48:[2,43],50:[2,43],52:[2,43],54:[2,43],55:[2,43],56:[2,43]},{1:[2,44],6:[2,44],7:[2,44],8:[2,44],9:[2,44],10:[2,44],13:[2,44],15:[2,44],16:[2,44],19:[2,44],21:[2,44],22:[2,44],29:[2,44],32:[2,44],33:[2,44],35:[1,54],36:[1,55],43:[2,44],44:[2,44],45:[2,44],46:[2,44],48:[2,44],50:[2,44],52:[2,44],54:[2,44],55:[2,44],56:[2,44]},{1:[2,38],6:[2,38],7:[2,38],8:[2,38],9:[2,38],10:[2,38],13:[2,38],15:[2,38],16:[2,38],19:[2,38],21:[2,38],22:[2,38],29:[2,38],32:[2,38],33:[2,38],35:[2,38],36:[2,38],38:[1,56],39:[1,57],40:[1,58],43:[2,38],44:[2,38],45:[2,38],46:[2,38],48:[2,38],50:[2,38],52:[2,38],54:[2,38],55:[2,38],56:[2,38]},{1:[2,39],6:[2,39],7:[2,39],8:[2,39],9:[2,39],10:[2,39],13:[2,39],15:[2,39],16:[2,39],19:[2,39],21:[2,39],22:[2,39],29:[2,39],32:[2,39],33:[2,39],35:[2,39],36:[2,39],38:[1,56],39:[1,57],40:[1,58],43:[2,39],44:[2,39],45:[2,39],46:[2,39],48:[2,39],50:[2,39],52:[2,39],54:[2,39],55:[2,39],56:[2,39]},{1:[2,34],6:[2,34],7:[2,34],8:[2,34],9:[2,34],10:[2,34],13:[2,34],15:[2,34],16:[2,34],19:[2,34],21:[2,34],22:[2,34],29:[2,34],32:[2,34],33:[2,34],35:[2,34],36:[2,34],38:[2,34],39:[2,34],40:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],48:[2,34],50:[2,34],52:[2,34],54:[2,34],55:[2,34],56:[2,34]},{1:[2,35],6:[2,35],7:[2,35],8:[2,35],9:[2,35],10:[2,35],13:[2,35],15:[2,35],16:[2,35],19:[2,35],21:[2,35],22:[2,35],29:[2,35],32:[2,35],33:[2,35],35:[2,35],36:[2,35],38:[2,35],39:[2,35],40:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],48:[2,35],50:[2,35],52:[2,35],54:[2,35],55:[2,35],56:[2,35]},{1:[2,36],6:[2,36],7:[2,36],8:[2,36],9:[2,36],10:[2,36],13:[2,36],15:[2,36],16:[2,36],19:[2,36],21:[2,36],22:[2,36],29:[2,36],32:[2,36],33:[2,36],35:[2,36],36:[2,36],38:[2,36],39:[2,36],40:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],48:[2,36],50:[2,36],52:[2,36],54:[2,36],55:[2,36],56:[2,36]},{1:[2,28],6:[2,28],7:[2,28],8:[2,28],9:[2,28],10:[2,28],13:[2,28],15:[2,28],16:[2,28],19:[2,28],21:[2,28],22:[2,28],29:[2,28],32:[2,28],33:[2,28],35:[2,28],36:[2,28],38:[2,28],39:[2,28],40:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],48:[2,28],50:[2,28],52:[2,28],54:[2,28],55:[2,28],56:[2,28]},{10:[1,31],14:41,22:[1,69],26:27,27:68,28:40,29:[1,42],30:24,31:28,32:[1,29],33:[1,100],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,9],6:[2,9],7:[2,9],8:[2,9],9:[2,9],13:[2,9],15:[2,9],16:[2,9],19:[2,9],21:[2,9]},{1:[2,14],6:[2,14],7:[2,14],8:[2,14],9:[2,14],13:[2,14],15:[2,14],16:[2,14],19:[2,14],21:[2,14],22:[2,14]},{1:[2,18],6:[2,18],7:[2,18],8:[2,18],9:[2,18],13:[2,18],15:[2,18],16:[2,18],19:[2,18],21:[2,18],22:[2,18]},{26:101,55:[1,30]},{1:[2,11],6:[2,11],7:[2,11],8:[2,11],9:[2,11],13:[2,11],15:[2,11],16:[2,11],19:[2,11],21:[2,11]},{1:[2,22],6:[2,22],7:[2,22],8:[2,22],9:[2,22],10:[2,22],13:[2,22],15:[2,22],16:[2,22],19:[2,22],21:[2,22],22:[2,22],29:[2,22],32:[2,22],33:[2,22],35:[2,22],36:[2,22],50:[2,22],55:[2,22]},{1:[2,4],6:[2,4],7:[2,4],8:[2,4],9:[2,4],13:[2,4],15:[2,4],16:[2,4],19:[2,4],21:[2,4]},{5:11,6:[1,4],7:[1,10],8:[1,102],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{10:[1,31],14:103,26:27,30:24,31:28,32:[1,29],34:23,35:[1,25],36:[1,26],37:22,41:21,42:20,47:18,49:17,50:[1,19],51:16,53:15,55:[1,30]},{1:[2,6],6:[2,6],7:[2,6],8:[2,6],9:[2,6],13:[2,6],15:[2,6],16:[2,6],19:[2,6],21:[2,6]},{5:11,6:[1,4],7:[1,10],8:[1,104],9:[1,5],13:[1,6],16:[1,7],19:[1,8],21:[1,9]},{1:[2,29],6:[2,29],7:[2,29],8:[2,29],9:[2,29],10:[2,29],13:[2,29],15:[2,29],16:[2,29],19:[2,29],21:[2,29],22:[2,29],29:[2,29],32:[2,29],33:[2,29],35:[2,29],36:[2,29],38:[2,29],39:[2,29],40:[2,29],43:[2,29],44:[2,29],45:[2,29],46:[2,29],48:[2,29],50:[2,29],52:[2,29],54:[2,29],55:[2,29],56:[2,29]},{1:[2,56],6:[2,56],7:[2,56],8:[2,56],9:[2,56],13:[2,56],15:[2,56],16:[2,56],19:[2,56],21:[2,56],22:[2,56],55:[2,56]},{9:[1,105]},{6:[2,57],7:[2,57],9:[2,57],13:[2,57],16:[2,57],19:[2,57],21:[2,57]},{13:[1,106]},{1:[2,5],6:[2,5],7:[2,5],8:[2,5],9:[2,5],13:[2,5],15:[2,5],16:[2,5],19:[2,5],21:[2,5]},{1:[2,7],6:[2,7],7:[2,7],8:[2,7],9:[2,7],13:[2,7],15:[2,7],16:[2,7],19:[2,7],21:[2,7]}],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:                              /* pass */
break;
case 1:                              /* pass */
break;
case 2:                              return 22
break;
case 3:                              return 52
break;
case 4:                              return 18
break;
case 5:                              return 6
break;
case 6:                              return 15
break;
case 7:                              return 8
break;
case 8:                              return 9
break;
case 9:                              return 13
break;
case 10:                              return 16
break;
case 11:                              return 11
break;
case 12:                              return 50
break;
case 13:                              return 54
break;
case 14:                              return 19
break;
case 15:                              return 21
break;
case 16:                              return 29
break;
case 17:                              return 7
break;
case 18:                              return 10
break;
case 19:                              return 55
break;
case 20:                              return 57
break;
case 21:                              return 56
break;
case 22:                              return 32
break;
case 23:                              return 33
break;
case 24:                              return 35
break;
case 25:                              return 36
break;
case 26:                              return 38
break;
case 27:                              return 39
break;
case 28:                              return 40
break;
case 29:                              return 45
break;
case 30:                              return 46
break;
case 31:                              return 43
break;
case 32:                              return 44
break;
case 33:                              return 48
break;
}
},
rules: [/^(?:#.*(?=\r?\n|$))/,/^(?:[\s]+)/,/^(?:,)/,/^(?:\b(and)\b)/,/^(?:\b(as)\b)/,/^(?:\b(def)\b)/,/^(?:\b(else)\b)/,/^(?:\b(end)\b)/,/^(?:\b(for)\b)/,/^(?:\b(if)\b)/,/^(?:\b(import)\b)/,/^(?:\b(in)\b)/,/^(?:\b(not)\b)/,/^(?:\b(or)\b)/,/^(?:\b(prop)\b)/,/^(?:\b(set)\b)/,/^(?:\b(default)\b)/,/^(?:[_A-Za-z]+)/,/^(?:\$[_A-Za-z][_0-9A-Za-z]*)/,/^(?:[\-+]?\d+(?:\.\d+)?)/,/^(?:"([^\\\\"]|\\\\.)*"|'([^\\\\']|\\\\.)*')/,/^(?:~)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
//"
;(function () {
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:                              /* pass */
break;
case 1:                              /* pass */
break;
case 2:                              return ','
break;
case 3:                              return 'AND'
break;
case 4:                              return 'AS'
break;
case 5:                              return 'DEF'
break;
case 6:                              return 'ELSE'
break;
case 7:                              return 'END'
break;
case 8:                              return 'FOR'
break;
case 9:                              return 'IF'
break;
case 10:                              return 'IMPORT'
break;
case 11:                              return 'IN'
break;
case 12:                              return 'NOT'
break;
case 13:                              return 'OR'
break;
case 14:                              return 'PROP'
break;
case 15:                              return 'SET'
break;
case 16:                              return 'DEFAULT'
break;
case 17:                              return 'SYMBOL'
break;
case 18:                              return 'LVALUE'
break;
case 19:                              return 'NUMBER'
break;
case 20:                              return 'STRING'
break;
case 21:                              return '~'
break;
case 22:                              return '('
break;
case 23:                              return ')'
break;
case 24:                              return '+'
break;
case 25:                              return '-'
break;
case 26:                              return '*'
break;
case 27:                              return '/'
break;
case 28:                              return '%'
break;
case 29:                              return '<='
break;
case 30:                              return '>='
break;
case 31:                              return '<'
break;
case 32:                              return '>'
break;
case 33:                              return '='
break;
}
},
rules: [/^(?:#.*(?=\r?\n|$))/,/^(?:[\s]+)/,/^(?:,)/,/^(?:\b(and)\b)/,/^(?:\b(as)\b)/,/^(?:\b(def)\b)/,/^(?:\b(else)\b)/,/^(?:\b(end)\b)/,/^(?:\b(for)\b)/,/^(?:\b(if)\b)/,/^(?:\b(import)\b)/,/^(?:\b(in)\b)/,/^(?:\b(not)\b)/,/^(?:\b(or)\b)/,/^(?:\b(prop)\b)/,/^(?:\b(set)\b)/,/^(?:\b(default)\b)/,/^(?:[_A-Za-z]+)/,/^(?:\$[_A-Za-z][_0-9A-Za-z]*)/,/^(?:[\-+]?\d+(?:\.\d+)?)/,/^(?:"([^\\\\"]|\\\\.)*"|'([^\\\\']|\\\\.)*')/,/^(?:~)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
});
return lexer;
})();
//"
tempath._lexer = lexer;
})();
;(function (exports) {
var nodejs = typeof window === 'undefined';
if (nodejs) {
    exports._parser = require('./bin/tempath.parser');
    exports._lexer = new require('jison-lex')(require('./bin/tempath.parser.json').lex);
}

function Renderer(ast, file) {
    if (ast === undefined)
        throw new Error('ast is required');
    this.ast = ast;
    this.file = file; // path of file
    this.caller = null; // renderer
    this.lloc = null; // called from
    this.args = null;
    this.scope = null;
    this.props = null;
    this.result = '';
    this.init();
}

function RenderError(message, line, column, file) {
    this.message = message || '';
    this.line = line;
    this.column = column;
    this.file = file;
}
RenderError.prototype.name = 'RenderError';

function bool(number) {
    return (number > 0) | 0;
}
var builtin = {
    M: function (x, y) { this.result += 'M' + x + ',' + y; },
    m: function (x, y) { this.result += 'm' + x + ',' + y; },
    Z: function () { this.result += 'Z'; },
    z: function () { this.result += 'z'; },
    L: function (x, y) { this.result += 'L' + x + ',' + y; },
    l: function (x, y) { this.result += 'l' + x + ',' + y; },
    H: function (x) { this.result += 'H' + x; },
    h: function (x) { this.result += 'h' + x; },
    V: function (y) { this.result += 'V' + y; },
    v: function (y) { this.result += 'v' + y; },
    C: function (x1, y1, x2, y2, x, y) { this.result += 'C' + x1 + ',' + y1 + ' ' + x2 + ',' + y2 + ' ' + x + ',' + y; },
    c: function (x1, y1, x2, y2, x, y) { this.result += 'c' + x1 + ',' + y1 + ' ' + x2 + ',' + y2 + ' ' + x + ',' + y; },
    S: function (x2, y2, x, y) { this.result += 'S' + x2 + ',' + y2 + ' ' + x + ',' + y; },
    s: function (x2, y2, x, y) { this.result += 's' + x2 + ',' + y2 + ' ' + x + ',' + y; },
    Q: function (x1, y1, x, y) { this.result += 'Q' + x1 + ',' + y1 + ' ' + x + ',' + y; },
    q: function (x1, y1, x, y) { this.result += 'q' + x1 + ',' + y1 + ' ' + x + ',' + y; },
    T: function (x, y) { this.result += 'T' + x + ',' + y; },
    t: function (x, y) { this.result += 't' + x + ',' + y; },
    A: function (rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y) { this.result += 'A' + rx + ',' + ry + ' ' + x_axis_rotation + ' ' + bool(large_arc_flag) + ',' + bool(sweep_flag) + ' ' + x + ',' + y; },
    a: function (rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, x, y) { this.result += 'a' + rx + ',' + ry + ' ' + x_axis_rotation + ' ' + bool(large_arc_flag) + ',' + bool(sweep_flag) + ' ' + x + ',' + y; }
};
var builtinFunction = {
    ceil: Math.ceil,
    round: Math.round,
    floor: Math.floor,
    sin: Math.sin,
    cos: Math.cos,
    tan: Math.tan,
    sqrt: Math.sqrt,
    atan2: Math.atan2
};
Object.keys(builtin).forEach(function (commandName) {
    builtin[commandName].isBuiltin = true;
});
Object.keys(builtinFunction).forEach(function (commandName) {
    builtinFunction[commandName].isBuiltin = true;
});

Renderer.prototype.init = function init(args, caller, lloc) {
    this.args = args || [];
    this.caller = caller || undefined;
    this.lloc = lloc || undefined;
    this.scope = new Scope(this.caller && this.caller.scope);
    this.props = this.getPropDefinitions();
    this.result = '';
};

Renderer.prototype.getPropDefinitions = function getPropDefinitions() {
    var result = [];
    this.ast.filter(function (node) {
        return node.type === 'prop';
    }).forEach(function (prop) {
        var prop_definitions = prop.tree[0];
        prop_definitions.forEach(function (definition) {
            var name, range, defaultValue;
            switch (definition.type) {
            case 'name':
                name = definition.tree[0];
                break;
            case 'name range':
                name = definition.tree[0];
                range = this.evaluate(definition.tree[1]);
                break;
            case 'name default':
                name = definition.tree[0];
                defaultValue = definition.tree[1];
                break;
            case 'name range default':
                name = definition.tree[0];
                range = this.evaluate(definition.tree[1]);
                defaultValue = definition.tree[2];
                break;
            default:
                throw new RenderError(
                    'unexpected prop definition type: ' + definition.type,
                    definition.lloc.first_line,
                    definition.lloc.first_column,
                    this.file
                );
            }
            result.push({ name: name, range: range, defaultValue: defaultValue });
        }.bind(this));
    }.bind(this));
    this.length = result.length;
    return result;
};

Renderer.prototype.get = function get(name) {
    return this.scope.get(name);
};

Renderer.prototype.set = function set(name, value) {
    this.scope.set(name, value);
};

Renderer.prototype.getFunction = function getFunction(name) {
    return this.scope.getFunction(name);
};

Renderer.prototype.setFunction = function setFunction(name, value) {
    this.scope.setFunction(name, value);
};

Renderer.prototype.evaluate = function evaluate(expression) {
    switch (expression.type) {
    case 'function call':
        return (function () {
            var fnName = expression.tree[0];
            var fn = this.getFunction(fnName);
            if (fn === undefined) {
                throw new RenderError(
                    'undefined function: ' + fnName,
                    expression.lloc.first_line,
                    expression.lloc.first_column,
                    this.file
                );
            }
            var forBuiltin = fn.isBuiltin;
            var args = expression.tree[1];
            args = args.map(function (argument) {
                if (argument.type === 'default') {
                    if (forBuiltin) {
                        throw new RenderError(
                            'default is not allowed for builtin function',
                            argument.lloc.first_line,
                            argument.lloc.first_column,
                            this.file
                        );
                    } else {
                        return undefined;
                    }
                }
                return this.evaluate(argument);
            }.bind(this));
            if (forBuiltin)
                return fn.apply(this, args);
            else
                return fn.apply(this, args, expression.lloc);
        }.bind(this))();
    case 'range':
        return {
            start: this.evaluate(expression.tree[0]),
            end: this.evaluate(expression.tree[1])
        };
    case 'string':
        return expression.tree[0];
    case 'number':
        return +(expression.tree[0]);
    case 'lvalue':
        return (function () {
            var name = expression.tree[0];
            var value = this.get(name);
            if (value === undefined) {
                throw new RenderError(
                    'undefined variable: ' + name,
                    expression.lloc.first_line,
                    expression.lloc.first_column,
                    this.file
                );
            }
            return value;
        }.bind(this))();
    case 'prefix +':
        return +(this.evaluate(expression.tree[0]));
    case 'prefix -':
        return -(this.evaluate(expression.tree[0]));
    case '*':
        return this.evaluate(expression.tree[0]) * this.evaluate(expression.tree[1]);
    case '/':
        return this.evaluate(expression.tree[0]) / this.evaluate(expression.tree[1]);
    case '%':
        return this.evaluate(expression.tree[0]) % this.evaluate(expression.tree[1]);
    case '+':
        return this.evaluate(expression.tree[0]) + this.evaluate(expression.tree[1]);
    case '-':
        return this.evaluate(expression.tree[0]) - this.evaluate(expression.tree[1]);
    case '<':
        return (this.evaluate(expression.tree[0]) < this.evaluate(expression.tree[1])) | 0;
    case '>':
        return (this.evaluate(expression.tree[0]) > this.evaluate(expression.tree[1])) | 0;
    case '<=':
        return (this.evaluate(expression.tree[0]) <= this.evaluate(expression.tree[1])) | 0;
    case '>=':
        return (this.evaluate(expression.tree[0]) >= this.evaluate(expression.tree[1])) | 0;
    case '=':
        return (this.evaluate(expression.tree[0]) === this.evaluate(expression.tree[1])) | 0;
    case 'not':
        return bool(this.evaluate(expression.tree[0])) ^ 1;
    case 'and':
        return bool(this.evaluate(expression.tree[0])) & bool(this.evaluate(expression.tree[1]));
    case 'or':
        return bool(this.evaluate(expression.tree[0])) | bool(this.evaluate(expression.tree[1]));
    }
    throw new RenderError(
        'unexpected expression type: ' + expression.type,
        expression.lloc.first_line,
        expression.lloc.first_column,
        this.file
    );
};

Renderer.prototype.apply = function apply(caller, args, lloc) {
    this.render(args, caller, lloc);
    caller.result += this.result;
};

Renderer.prototype.runCommand = function runCommand(node) {
    if (this.render[node.type] === undefined) {
        throw new RenderError(
            'unexpected command type: ' + node.type,
            node.lloc.first_line,
            node.lloc.first_column,
            this.file
        );
    } else {
        this.render[node.type].call(this, node);
    }
};

Renderer.prototype.render = function render(args, caller, lloc) {
    this.init(args, caller, lloc);
    this.ast.forEach(this.runCommand.bind(this));
    return this.result;
};
Renderer.prototype.render['command'] = function (node) {
    var commandName = node.tree[0];
    var commandArguments = node.tree[1];
    var command = this.get(commandName);
    if (command === undefined) {
        throw new RenderError(
            'undefined command: ' + commandName,
            node.lloc.first_line,
            node.lloc.first_column,
            this.file
        );
    }
    if (command.length === 0) {
        command.apply(this, [], node.lloc);
    } else {
        for (var i = 0; i < commandArguments.length; i += command.length) {
            var argumentsFragment = commandArguments.slice(i, i + command.length);
            if (argumentsFragment.length < command.length) {
                throw new RenderError([
                        commandName, ': ', command.length, ' ',
                        (command.length === 1 ? 'argument' : 'arguments'),
                        ' required, but only ', argumentsFragment.length, ' present.'
                    ].join(''),
                    node.lloc.last_line, node.lloc.last_column, this.file
                );
            }
            if (command.isBuiltin) {
                // builtin command is function
                command.apply(this, evaluateArguments.call(this, argumentsFragment, true));
            } else {
                // custom command is renderer
                command.apply(
                    this, evaluateArguments.call(this, argumentsFragment, false),
                    node.lloc
                );
            }
        }
    }
    function evaluateArguments(args, forBuiltin) {
        return args.map(function (argument) {
            if (argument.type === 'default') {
                if (forBuiltin) {
                    throw new RenderError(
                        'default is not allowed for builtin command',
                        argument.lloc.first_line,
                        argument.lloc.first_column,
                        this.file
                    );
                } else {
                    return undefined;
                }
            }
            return this.evaluate(argument);
        }.bind(this));
    }
};
Renderer.prototype.render['prop'] = function (node) {
    var prop_definitions = node.tree[0];
    prop_definitions.forEach(function (definition) {
        var name, range, rangeMin, rangeMax, defaultValue;
        var value = this.args.shift();
        switch (definition.type) {
        case 'name':
            name = definition.tree[0];
            break;
        case 'name range':
            name = definition.tree[0];
            range = this.evaluate(definition.tree[1]);
            break;
        case 'name default':
            name = definition.tree[0];
            defaultValue = definition.tree[1];
            break;
        case 'name range default':
            name = definition.tree[0];
            range = this.evaluate(definition.tree[1]);
            defaultValue = definition.tree[2];
            break;
        default:
            throw new RenderError(
                'unexpected prop definition type: ' + definition.type,
                definition.lloc.first_line,
                definition.lloc.first_column,
                this.file
            );
        }
        if (typeof value !== 'number' || isNaN(value)) {
            if (defaultValue !== undefined) {
                value = this.evaluate(defaultValue);
            } else {
                if (value === undefined) { // default
                    throw new RenderError(
                        'there is no default value: ' + name,
                        this.lloc && this.lloc.first_line,
                        this.lloc && this.lloc.first_column,
                        this.caller && this.caller.file
                    );
                } else {
                    throw new RenderError(
                        'input value is not a number: ' + value,
                        definition.lloc.first_line,
                        definition.lloc.first_column,
                        this.file
                    );
                }
            }
        }
        if (range !== undefined) {
            rangeMin = Math.min(range.start, range.end);
            rangeMax = Math.max(range.start, range.end);
            value = Math.max(Math.min(value, rangeMax), rangeMin);
        }
        this.set(name, value);
    }.bind(this));
};
Renderer.prototype.render['set'] = function (node) {
    var name = node.tree[0];
    var value = this.evaluate(node.tree[1]);
    this.set(name, value);
};
Renderer.prototype.render['for in range'] = function (node) {
    var i = node.tree[0];
    var j;
    var range = this.evaluate(node.tree[1]);
    var start = Math.floor(range.start);
    var end = Math.floor(range.end);
    var ast = node.tree[2];
    var parentScope = this.scope;
    this.scope = new Scope(this.scope);
    if (end < start) {
        for (j = start; j >= end; --j) {
            this.set(i, j);
            ast.forEach(this.runCommand.bind(this));
        }
    } else {
        for (j = start; j <= end; ++j) {
            this.set(i, j);
            ast.forEach(this.runCommand.bind(this));
        }
    }
    this.scope = parentScope;
};
Renderer.prototype.render['if'] = function (node) {
    var condition = this.evaluate(node.tree[0]);
    var ast = node.tree[1];
    var parentScope = this.scope;
    this.scope = new Scope(this.scope);
    if (bool(condition))
        ast.forEach(this.runCommand.bind(this));
    this.scope = parentScope;
};
Renderer.prototype.render['if else'] = function (node) {
    var condition = this.evaluate(node.tree[0]);
    var trueAst = node.tree[1];
    var falseAst = node.tree[2];
    var parentScope = this.scope;
    this.scope = new Scope(this.scope);
    if (bool(condition))
        trueAst.forEach(this.runCommand.bind(this));
    else
        falseAst.forEach(this.runCommand.bind(this));
    this.scope = parentScope;
};
Renderer.prototype.render['import'] = function (node) {
    var fileNode = node.tree[0];
    var file = exports.resolveFilePath(this.file, this.evaluate(fileNode));
    var ast = exports.importFileAsAST(file);
    if (ast === undefined)
        ast = parse(exports.importFile(file));
    if (ast === undefined) {
        throw new RenderError(
            'file not found: ' + file,
            fileNode.lloc.first_line,
            fileNode.lloc.first_column,
            this.file
        );
    }
    var renderer = new Renderer(ast, file);
    var commandName = node.tree[1];
    if (commandName === undefined) {
        commandName = file.split(/\\|\//g).pop().split('.').shift();
    }
    this.set(commandName, renderer);
};
Renderer.prototype.render['def'] = function (node) {
    var name = node.tree[0];
    var ast = node.tree[1];
    var renderer = new Renderer(ast, this.file);
    this.set(name, renderer);
};

function Scope(parent) {
    this.environment = {};
    this.functionEnvironment = {};
}

Scope.prototype.get = function get(name) {
    if (this.environment[name] !== undefined)
        return this.environment[name];
    if (this.parent)
        return this.parent.get(name);
    return builtin[name];
};

Scope.prototype.set = function set(name, value) {
    this.environment[name] = value;
};

Scope.prototype.getFunction = function getFunction(name) {
    if (this.functionEnvironment[name] !== undefined)
        return this.functionEnvironment[name];
    if (this.parent)
        return this.parent.getFunction(name);
    return builtinFunction[name];
};

Scope.prototype.setFunction = function setFunction(name, value) {
    this.functionEnvironment[name] = value;
};

function parse(code) {
    return exports._parser.parse(code);
}

function tokenize(code, prop) {
    var lexer = exports._lexer;
    lexer.setInput(code);
    function nextToken() {
        return {
            type: lexer.lex(),
            text: lexer.yytext,
            lloc: lexer.yylloc
        };
    }
    var result = [];
    var token = nextToken();
    while (token.type !== lexer.EOF) {
        if (prop !== undefined)
            result.push(token[prop]);
        else
            result.push(token);
        token = nextToken();
    }
    return result;
}

exports.RenderError = RenderError;
exports.parse = parse;
exports.tokenize = tokenize;
exports.getPropDefinitionsByAST = function getPropDefinitionsByAST(ast) {
    var renderer = new Renderer(ast);
    return renderer.getPropDefinitions();
};
exports.getPropDefinitions = function getPropDefinitions(code) {
    var ast = parse(code);
    return exports.getPropDefinitionsByAST(ast);
};
exports.renderByAST = function renderByAST(ast, args, file) {
    var renderer = new Renderer(ast, file);
    return renderer.render(args, undefined, undefined);
};
exports.render = function render(code, args, file) {
    var ast = parse(code);
    return exports.renderByAST(ast, args, file);
};

exports.resolveFilePath = function resolveFilePath(from, file) {
    return file;
};
exports.importFileAsAST = function importFileAsAST(file) {
    return undefined;
};
exports.importFile = function importFile(file) {
    return undefined;
};


})(typeof window === 'undefined' ? exports : tempath);
